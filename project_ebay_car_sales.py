# -*- coding: utf-8 -*-
"""Project eBay Car Sales.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19nkXuXrixLksxX2f8YcdXbryxzVHt1i4

# Project eBay Car Sales

The aim of this project is to clean the data and analyze the included used car listings. We'll work with a dataset of used cars from eBay Kleinanzeigen, a classifieds section of the German eBay website.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

dane = pd.read_csv('https://query.data.world/s/qhawnnfn6e7ughygt5tjz6xzfhkykk', encoding = 'cp1252')
dane.head(3)

dane.info()

"""Changing columns name with python_style ones"""

dane.columns

correction = {'dateCrawled' : 'date_crawled' , 'name' : 'name', 'seller' : 'seller', 'offerType' : 'offer_type', 'price' : 'price', 'abtest' : 'abtest',
       'vehicleType' : 'vehicle_type', 'yearOfRegistration' : 'registration_year', 'gearbox' : 'gearbox', 'powerPS':'power_ps', 'model':'model',
       'kilometer':'kilometer', 'monthOfRegistration':'registration_month', 'fuelType':'fuel_type', 'brand':'brand',
       'notRepairedDamage':'unrepaired_damage', 'dateCreated':'ad_created', 'nrOfPictures':'nr_of_pictures', 'postalCode':'postal_code',
       'lastSeen':'last_seen'}

dane=dane.rename(columns=correction)
dane.columns

dane.describe(include='all')

"""We can see some incorrect data in column registration_name. 'Min' and 'max' takes unacceptable values."""

dane['name'].value_counts()

dane['name'].unique().shape

dane['vehicle_type'].value_counts()

print(dane['brand'].value_counts())

dane['brand'].unique().shape

"""Deleting values with clearly wrong data

We assume that there shouldn't be cars with registration year earlier than 1930 and later that 2023
"""

dane = dane.drop(dane[(dane['registration_year'] < 1930) | (dane['registration_year'] > 2023)].index)

"""Also there only twelve months within a year"""

dane = dane.drop(dane[(dane['registration_month'] < 1) | (dane['registration_month'] > 12)].index)

"""We also assume that car should at least have power of 1 ps and no more that 3000."""

dane = dane.drop(dane[(dane['power_ps'] < 1) | (dane['power_ps'] > 3000)].index)

"""At last, we consider that the minimum price for the car is 1000 and the maximum price is 150000"""

dane = dane.drop(dane[(dane['price'] < 1000) | (dane['power_ps'] > 150000)].index)

"""Showing the distribution of values within each column with % and with histogram"""

from unicodedata import normalize
dist_crawled = dane['date_crawled'].str[:10].value_counts(normalize = True, dropna = False)
dist_crawled

dist_crawled.plot.hist()

"""The most adds was crawled 2016-04-03 and it was about 13."""

dist_ad = dane['ad_created'].str[:10].value_counts(normalize = True, dropna = False)
dist_ad

"""The most adds was also created on 2016-04-03"""

dist_lastseen = dane['last_seen'].str[:10].value_counts(normalize = True, dropna = False)
dist_lastseen

"""2016-04-06 was the day that the most ad was seen online by the crawler

Calculating the average price for each brand
"""

unique_brands = dane['brand'].unique()
unique_brands

avg_brand_price = {}
for b in unique_brands:
  avg_price = dane.loc[dane['brand'] == b, 'price'].mean()
  avg_brand_price[b] = avg_price

avg_brand_price

max_avg_price = max(avg_brand_price.values())
max_avg_price

"""Highest average price for brand is around 1064437. The brand is 'sonstige_autos'"""

brands = dane['brand'].value_counts()
brands.shape
brands

top_5 = brands.index[:5]
top_5

"""The most popular brand (with the most sales) is volkswagen. These are the top 5 brands."""

top_5_count = dane['brand'].value_counts()
top_5_count = top_5_count[:5]
top_5_count

"""Number of sold cars (from top 5)

Calculating average price for top 5 brands.
"""

avg_brand_price_5 = {}
for b in top_5:
  avg_price = dane.loc[dane['brand'] == b, 'price'].mean()
  avg_brand_price_5[b] = avg_price

avg_brand_price_5 = pd.Series(avg_brand_price_5)
avg_brand_price_5

"""Mercedes is the most expensive brand from top 5 (17245) and open is the cheapest (5002)

Calculating average disctance traveled
"""

avg_brand_km_5 = {}
for b in top_5:
  avg_km = dane.loc[dane['brand'] == b, 'kilometer'].mean()
  avg_brand_km_5[b] = avg_km
  
avg_brand_km_5 = pd.Series(avg_brand_km_5)
avg_brand_km_5

df_price = pd.DataFrame(avg_brand_price_5, columns = ['mean_price'])
df_price

df_km = pd.DataFrame(avg_brand_km_5, columns = ['mean_km'])
df_km

df_price_km = df_price
df_price_km['mean_km'] = avg_brand_km_5
df_price_km

df_price_km.sort_values('mean_price', axis=0, ascending= False, inplace = True)
df_price_km

"""Making some plots"""

df_price_km.plot(kind='bar', stacked=False)

df_price_km['mean_km'].plot(kind='pie',autopct='%1.1f%%')
plt.title('Average Km by Type')
plt.show()

df_price_km['mean_price'].plot(kind='pie',autopct='%1.1f%%')
plt.title('Average price by Type')
plt.show()

plt.scatter(df_price_km['mean_km'], df_price_km['mean_price'])
plt.title('km vs. price by Type')
plt.xlabel('mean_km')
plt.ylabel('mean_price')
plt.show()

"""Calculating the best km/price ratio"""

df_price_km

df_price_km['km/price_ratio'] = df_price_km['mean_km']/df_price_km['mean_price']
df_price_km

df_price_km.sort_values('km/price_ratio', axis=0, ascending= False, inplace = True)
df_price_km

"""Opel has the best km/price ratio"""